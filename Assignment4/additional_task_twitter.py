# -*- coding: utf-8 -*-
"""Additional_Task_twitter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WsXpia3wIluKwgfIbkgh0uLJMX5T0LRZ

Assignment 4 - Additional Task - K-Fold Cross Validation on Twitter Dataset

M24CSA020_M24CSA021_M24CSA029_M24CSA033
"""

import torch
import pandas as pd
import numpy as np
import re
from collections import Counter
import spacy
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import classification_report, accuracy_score
from torch.utils.data import Dataset, DataLoader
import torch.nn as nn
import torch.nn.functional as F

import warnings
warnings.filterwarnings("ignore")

# --- Load SpaCy Model ---
nlp = spacy.load("en_core_web_sm")
print(" SpaCy model loaded.")

# --- Load Dataset ---
df = pd.read_csv("twitter_training.csv", header=None, names=["id", "entity", "sentiment", "text"])
print(f" Dataset loaded. Total samples: {len(df)}")

df

# --- Label Mapping ---
label_map = {"Negative": 2, "Neutral": 0, "Positive": 1}
df['label'] = df['sentiment'].map(label_map)

print(df["label"].unique())

df

print(df['label'].isnull().sum())

df = df.dropna(subset=['label'])
print(f" samples after dropping NaN labels: {len(df)}")

df.shape

# --- Preprocessing Functions ---
def clean_text(text):
    cleaned = re.sub(r"http\S+|www\S+|https\S+", '', text)
    cleaned = re.sub(r"\@\w+|\#", '', cleaned)
    return cleaned.strip()

def tokenize(text):
    tokens = [token.text.lower() for token in nlp(text) if not token.is_space]
    return tokens

def encode_tokens(tokens, word2idx):
    encoded = [word2idx.get(token, word2idx['UNK']) for token in tokens]
    return encoded

def pad_or_truncate(seq, max_len, pad_idx):
    padded = seq[:max_len] + [pad_idx] * max(0, max_len - len(seq))
    return padded

# --- Process Dataset ---
df['text'] = df['text'].astype(str).apply(clean_text);
df['tokens'] = df['text'].apply(tokenize);

# Build vocab
all_tokens = [token for tokens in df['tokens'] for token in tokens]
token_freq = Counter(all_tokens)
vocab = ['PAD', 'UNK'] + sorted([word for word, freq in token_freq.items() if freq >= 5])
word2idx = {word: idx for idx, word in enumerate(vocab)}
pad_idx = word2idx['PAD']
vocab_size = len(word2idx)
print(f" Vocab size: {vocab_size}")

# Encode
df['encoded'] = df['tokens'].apply(lambda x: encode_tokens(x, word2idx))
max_len = df['encoded'].apply(len).sum() // len(df)
print(f" Average sequence length (max_len): {max_len}")
df['padded'] = df['encoded'].apply(lambda x: pad_or_truncate(x, max_len, pad_idx))

# --- Dataset Class ---
class IndexedTweetDataset(Dataset):
    def __init__(self, padded_list, labels):
        self.X = padded_list
        self.y = labels

    def __len__(self):
        return len(self.X)

    def __getitem__(self, idx):
        return torch.tensor(self.X[idx], dtype=torch.long), torch.tensor(self.y[idx], dtype=torch.long)

# --- Model ---
class LSTMClassifier(nn.Module):
    def __init__(self, vocab_size, embed_dim=100, hidden_dim=256, output_dim=3):
        super(LSTMClassifier, self).__init__()
        self.embedding = nn.Embedding(vocab_size, embed_dim, padding_idx=pad_idx)
        self.lstm = nn.LSTM(embed_dim, hidden_dim, batch_first=True)
        self.fc = nn.Linear(hidden_dim, output_dim)

    def forward(self, x):
        embedded = self.embedding(x)
        _, (hidden, _) = self.lstm(embedded)
        out = self.fc(hidden[-1])
        return out

# --- 5-Fold Cross Validation ---
X = df['padded'].tolist()
y = df['label'].astype(int).tolist()
skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f" Using device: {device}")

fold = 1
all_fold_metrics = []

for train_idx, val_idx in skf.split(X, y):
    print(f"\n================ Fold {fold} ================")

    train_dataset = IndexedTweetDataset([X[i] for i in train_idx], [y[i] for i in train_idx])
    val_dataset = IndexedTweetDataset([X[i] for i in val_idx], [y[i] for i in val_idx])

    train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
    val_loader = DataLoader(val_dataset, batch_size=32)

    model = LSTMClassifier(vocab_size).to(device)
    criterion = nn.CrossEntropyLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

    best_val_acc = 0.0

    for epoch in range(1, 21):
        model.train()
        total_loss = 0

        for inputs, labels in train_loader:
            inputs, labels = inputs.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            total_loss += loss.item()

        model.eval()
        all_preds, all_labels = [], []
        with torch.no_grad():
            for inputs, labels in val_loader:
                inputs, labels = inputs.to(device), labels.to(device)
                outputs = model(inputs)
                preds = torch.argmax(outputs, dim=1)
                all_preds.extend(preds.cpu().numpy())
                all_labels.extend(labels.cpu().numpy())

        acc = accuracy_score(all_labels, all_preds)
        print(f"Epoch {epoch}/20: Loss={total_loss/len(train_loader):.4f}, Val Acc={acc:.4f}")

        if acc > best_val_acc:
            best_val_acc = acc
            best_report = classification_report(all_labels, all_preds, output_dict=True)

    all_fold_metrics.append(best_report)
    fold += 1

# --- Average Results ---
avg_acc = np.mean([rep["accuracy"] for rep in all_fold_metrics])
avg_macro_f1 = np.mean([rep["macro avg"]["f1-score"] for rep in all_fold_metrics])
print(f"\n Average Accuracy: {avg_acc:.4f}, Average Macro F1: {avg_macro_f1:.4f}")